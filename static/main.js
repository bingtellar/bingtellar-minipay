async function sendToken(){
    // Check if MetaMask is installed
    if (typeof window.ethereum === 'undefined') {
      alert('Please install MetaMask to use this application.');
      return;
    }

    // Request account access if not already authorized
    try {
      await window.ethereum.request({ method: 'eth_requestAccounts' });
    } catch (error) {
      alert('You need to connect MetaMask to use this application.');
      return;
    }

    // Initialize web3
    const web3 = new Web3(window.ethereum);

    // Get the selected account
    const accounts = await web3.eth.getAccounts();
    const senderAddress = accounts[0]; // Use the first account for simplicity

    // Replace 'YOUR_TOKEN_ADDRESS' with the actual ERC-20 token contract address
    const tokenContractAddress = '0xAFa305aBB738679AFe09F8e4AEcd978B69ec677B';
    const tokenAbi = JSON.parse('[{"inputs": [{"internalType": "address", "name": "_tokenAddress", "type": "address"}], "stateMutability": "nonpayable", "type": "constructor"}, {"inputs": [{"internalType": "address", "name": "spender", "type": "address"}, {"internalType": "uint256", "name": "amount", "type": "uint256"}], "name": "approve", "outputs": [], "stateMutability": "nonpayable", "type": "function"}, {"inputs": [], "name": "owner", "outputs": [{"internalType": "address", "name": "", "type": "address"}], "stateMutability": "view", "type": "function"}, {"inputs": [{"internalType": "address", "name": "to", "type": "address"}, {"internalType": "uint256", "name": "amount", "type": "uint256"}], "name": "sendTokens", "outputs": [], "stateMutability": "nonpayable", "type": "function"}, {"inputs": [], "name": "token", "outputs": [{"internalType": "contract IERC20", "name": "", "type": "address"}], "stateMutability": "view", "type": "function"}]')
    const data = '0x608060405234801561001057600080fd5b50600436106100575760003560e01c80631fccf6721461005c578063642f2eaf1461008c5780638da5cb5b146100da57806392a1f7e8146100ed578063f535502414610102575b600080fd5b60015461006f906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6100bd61009a36600461057b565b600260208190526000918252604090912080546001820154919092015460ff1683565b604080519384526020840192909252151590820152606001610083565b60005461006f906001600160a01b031681565b6101006100fb3660046105b0565b610115565b005b6101006101103660046105e3565b610348565b600082116101745760405162461bcd60e51b815260206004820152602160248201527f416d6f756e74206d7573742062652067726561746572207468616e207a65726f6044820152601760f91b60648201526084015b60405180910390fd5b6040516bffffffffffffffffffffffff1933606090811b8216602084015285901b166034820152604881018390526068810182905260009060880160408051601f1981840301815291815281516020928301206000818152600293849052919091209091015490915060ff161561022d5760405162461bcd60e51b815260206004820152601e60248201527f5472616e73616374696f6e20616c72656164792070726f6365737365642e0000604482015260640161016b565b6040805160608101825284815260208082018581526000838501818152868252600293849052949020925183555160018084019190915592519101805460ff1916911515919091179055546001600160a01b03166323b872dd3330610292868861060d565b6040516001600160e01b031960e086901b1681526001600160a01b03938416600482015292909116602483015260448201526064016020604051808303816000875af11580156102e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061030a9190610634565b50604051838152819033907fac7e19b5842ffe3c2d0c798df5445477835a076d7c0c4888fdcb0968f29ec88d9060200160405180910390a350505050565b6000546001600160a01b031633146103b15760405162461bcd60e51b815260206004820152602660248201527f4f6e6c7920746865206f776e65722063616e2063616c6c20746869732066756e60448201526531ba34b7b71760d11b606482015260840161016b565b6000818152600260208190526040909120015460ff16156104145760405162461bcd60e51b815260206004820152601e60248201527f5472616e73616374696f6e20616c72656164792070726f6365737365642e0000604482015260640161016b565b600081815260026020526040908190206001548154925163a9059cbb60e01b81526001600160a01b03868116600483015260248201949094529192169063a9059cbb906044016020604051808303816000875af1158015610479573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061049d9190610634565b50600180546000549183015460405163a9059cbb60e01b81526001600160a01b039384166004820152602481019190915291169063a9059cbb906044016020604051808303816000875af11580156104f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061051d9190610634565b5060028101805460ff19166001179055805460405183916001600160a01b038616917fc139f5e596d6cfbd37284c834e86c5baeef0b56293217fd31ba16c589c70901f9161056e9190815260200190565b60405180910390a3505050565b60006020828403121561058d57600080fd5b5035919050565b80356001600160a01b03811681146105ab57600080fd5b919050565b6000806000606084860312156105c557600080fd5b6105ce84610594565b95602085013595506040909401359392505050565b600080604083850312156105f657600080fd5b6105ff83610594565b946020939093013593505050565b8082018082111561062e57634e487b7160e01b600052601160045260246000fd5b92915050565b60006020828403121561064657600080fd5b8151801515811461065657600080fd5b939250505056fea2646970667358221220224c74d231ec0c48ca0e28f989547ce880b9029005df6452200675e87f7272fe64736f6c63430008130033';
    const tokenContract = new web3.eth.Contract(tokenAbi, tokenContractAddress);
    tokenContract.defaultChain = 'alfajores';

    // Replace 'RECIPIENT_ADDRESS' with the address you want to send tokens to
    const recipientAddress = '0x8bA16fB3A8dA003083Fa7025fefd59006DBf6750';

    // Replace 'AMOUNT_TO_SEND' with the amount of tokens to send
    const amountToSend = web3.utils.toWei('1', 'ether'); // Example: 1 token

    // Send tokens
    try {
      const tx = await tokenContract.methods.sendTokens(recipientAddress, amountToSend).send({
          from: senderAddress,
          gas: 10000000,
          data: data
      });
      console.log('Transaction Hash:', tx.transactionHash);
      alert('Tokens sent successfully!');
    } catch (error) {
      console.error('Error sending tokens:', error);
      alert('Error sending tokens. Please check the console for details.');
    }
}